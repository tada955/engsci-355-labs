[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ENGSCI 355 Labs",
    "section": "",
    "text": "Preface\nThese are the Labs for ENGSCI 355.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/lab_1/lab_1.html",
    "href": "chapters/lab_1/lab_1.html",
    "title": "1  Radiology Clinic",
    "section": "",
    "text": "1.1 Experiments\nWe will perform just one experiment, using distributions for the arrival, check in, and scan processes. We will use a Poisson distribution with \\(\\lambda=8/\\text{hour}\\) for the arrival process, a uniform distribution between 2 and 5 minutes for the check in durations, and a log-normal distribution where the underlying normal variable has a mean of -1.34 and standard deviation 0.29 for the scan durations. For the experiment we will run 50 replications that each last for 1 week.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1/lab_1.html#jaamsim-model",
    "href": "chapters/lab_1/lab_1.html#jaamsim-model",
    "title": "1  Radiology Clinic",
    "section": "1.2 Jaamsim Model",
    "text": "1.2 Jaamsim Model\n\n1.2.1 Creating Model Objects\nRun Jaamsim by opening Eclipse and the clicking the run button and select GUIFrame. The HCCM palette on the left hand side allows us to create Jaamsim objects that correspond to the components of our HCCM conceptual models. Based on the problem description and conceptual model we need three types of entities: patients, receptionists, and CT Machines. To create each of these expand the HCCM palette in the Model Builder window, select ActiveEntity, and dragging it into the View Window, see Figure 1.1. Then in the Object Selector window select ActiveEntity1, press F2, and rename it PatientEntity.\n\n\n\n\n\n\n\nFigure 1.1: Screenshot of an ActiveEntity\n\n\nRepeat this process two more times and create ActiveEntities called ReceptionistEntity and CTMachineEntity.\nAn ActiveEntity object by itself does not create any entities in the simulation, it just acts as a prototype for entities. To create entities an ArriveEvent object is used, which simulates patients/receptionists/CTMachines arriving at the clinic. The ArriveEvent object creates a series of entities that are passed to the next object in a process. The PrototypeEntity keyword identifies the entity to be copied. The rate at which entities are generated is determined by the InterArrivalTime and FirstArrivalTime keywords. Create three ArriveEvents called PatientArrival, ReceptionistArrival, and CTMachineArrival, and set the PrototypeEntity to be the related entity (patient, receptionist, CTMachine).\nWe also need to create objects that represent the entities leaving, called LeaveEvent, we will only create one for the patients, as we are assuming that the receptionist and CT machines are available 24/7 so they do not need to leave. Drag and drop a leave event into the simulation, rename it PatientLeave, and set the Participant to be the patient entity (under the HCCM tab).\nThe patients waiting for check in and scanning, and both the receptionist and CT machines waiting for tasks can be represented by WaitActivities, so create four WaitActivities and rename them WaitForCheckIn, WaitForScan, WaitForTaskReceptionist, and WaitForTaskCTMachine respectively, and once again set the Participant to the respective entity.\nWe can then represent the patient doing check in with the receptionist, and the patient being scanned by a CT machine as process activities. Create two process activities and rename them CheckIn, and Scan.\nWe also need to create objects to represent the probability distributions that the interarrival, check in, and scan times come from. Probability distributions can be represented in Jaamsim with distribution objects. If we examine the PatientArrival object we see two keywords FirstArrivalTime and InterArrivalTime which determine the rate that the entities are created. For a Poisson process with an average of 8 arrivals per hour the interarrival times can be modelled by an exponential distribution with mean 0.125 hours. We therefore go into the Probability Distributions palette in the Model Builder window and create an ExponentialDistribution object and name it ArrivalDistribution. First we set the UnitType keyword to be TimeUnit, then we set the mean of the distribution to 0.125 h. The UnitType tells Jaamsim what type of value we want the distribution object to create, in our case this is the time between arrivals in hours, which is a unit of time. Also make sure that the RandomSeed is 1, this determines the seed for the random number generator. Table 1.1 shows the keywords and values for the ArrivalDistribution object.\n\n\n\nTable 1.1: Arrival Distribution Inputs\n\n\n\n\n\nObject\nKeyword\nValue\n\n\n\n\nArrivalDistribution\nUnitType\nTimeUnit\n\n\n\nRandomSeed\n1\n\n\n\nMean\n0.125 h\n\n\n\n\n\n\nWe need to repeat these steps for the check in and scan processes, which follow uniform and log-normal distributions respectively, so create a UniformDistribution object called CheckInDistribution and a LogNormalDistribution object called ScanDistribution. Then update the keywords of the distribution objects as follows in Table 1.2:\n\n\n\nTable 1.2: Check In and Scan Distributions\n\n\n\n\n\nObject\nKeyword\nValue\n\n\n\n\nCheckInDistribtuion\nUnitType\nTimeUnit\n\n\n\nRandomSeed\n2\n\n\n\nMinValue\n2 min\n\n\n\nMaxValue\n5 min\n\n\n\n\n\n\n\nScanDistribution\nUnitType\nTimeUnit\n\n\n\nRandomSeed\n3\n\n\n\nScale\n1 h\n\n\n\nNormalMean\n-1.34\n\n\n\nNormalSD\n0.29\n\n\n\n\n\n\nThe final object we need at this stage is a Statistics object, to capture some output about the patients. This is found under the ProcessFlow palette, create a Statistics object and call it TimeInSystem.\nAt this point you should have the objects shown in Table 1.3 in your simulation.\n\n\n\nTable 1.3: Model Objects\n\n\n\n\n\nObject Type\nName\n\n\n\n\nActiveEntity\nPatientEntity\n\n\nActiveEntity\nReceptionistEntity\n\n\nActiveEntity\nCTMachineEntity\n\n\n\n\n\n\nArriveEvent\nPatientArrival\n\n\nArriveEvent\nReceptionistArrival\n\n\nArriveEvent\nCTMachineArrival\n\n\n\n\n\n\nLeaveEvent\nPatientLeave\n\n\n\n\n\n\nWaitActivity\nWaitForCheckIn\n\n\nWaitActivity\nWaitForScan\n\n\nWaitActivity\nWaitForTaskReceptionist\n\n\nWaitActivity\nWaitForTaskCTMachine\n\n\n\n\n\n\nProcessActivity\nCheckIn\n\n\nProcessActivity\nScan\n\n\n\n\n\n\nExponentialDistribution\nArrivalDistribution\n\n\nUniformDistribution\nCheckInDistribution\n\n\nLogNormalDistribution\nScanDistribution\n\n\n\n\n\n\nStatistics\nTimeInSystem\n\n\n\n\n\n\nOnce you have created all of these objects lay them out similarly to as shown in Figure 1.2.\n\n\n\n\n\n\nFigure 1.2: Screenshot of Simulation Model Layout\n\n\n\nCreate a new folder in the ‘labs’ folder called ‘RC1’ and save your simulation as ‘radiology_lab.cfg’ or something similar inside the new folder. Also take this opportunity to change the graphics of the PatientEntity, ReceptionistEntity and CTMachineEntity. Download the patient.png, receptionist.png, and ctscanner.png (icons made by Freepik from www.flaticon.com) files from Canvas and save them in the same folder as your simulation .cfg file. Then in Jaamsim right click on PatientEntity and select Change Graphics. Click on Import and navigate to your downloaded patient.png, import it (it may be called patient-model) and accept the change. Repeat the process for the receptionists, and CT scanners.\n\n\n1.2.2 Configuring Objects\nNow that we have created the objects we need, we need to set the options for the each of them, starting with the ArriveEvents. The PatientArrival should have both the first arrival time and inter arrival times set by the ArrivalDistribution object, use the PatientEntity as a prototype, and the NextAEJObject should be WaitForCheckIn. NextAEJObject stands for next activity/event/Jaamsim object and refers to the fact that the next place an entity goes could be a standard Jaamsim object or a custom HCCM activity or event. For the arrive events we set NextAEJObject to the object that represents the activity that is transitioned to at the end of the event state changes in the conceptual model. For the ReceptionistArrival and CTMachineArrival we need to: set the prototype entity; both MaxNumber and InitialNumber (1 for receptionist, 3 for CT Machine); and set the NextAEJObject to the respective wait activity.\n\n\n\nTable 1.4: Arrival Event Parameters\n\n\n\n\n\nObject\nTab\nKeyword\nValue\n\n\n\n\nPatientArrival\nKey Inputs\nPrototypeEntity\nPatientEntity\n\n\nPatientArrival\nKey Inputs\nFirstArrivalTime\nArrivalDistribution\n\n\nPatientArrival\nKey Inputs\nInterArrivalTime\nArrivalDistribution\n\n\nPatientArrival\nHCCM\nNextAEJObject\nWaitForCheckIn\n\n\n\n\n\n\n\n\nReceptionistArrival\nKey Inputs\nPrototypeEntity\nReceptionistEntity\n\n\nReceptionistArrival\nKey Inputs\nMaxNumber\n1\n\n\nReceptionistArrival\nKey Inputs\nInitialNumber\n1\n\n\nReceptionistArrival\nHCCM\nNextAEJObject\nWaitForTaskReceptionist\n\n\n\n\n\n\n\n\nCTMachineArrival\nKey Inputs\nPrototypeEntity\nCTMachineEntity\n\n\nCTMachineArrival\nKey Inputs\nMaxNumber\n3\n\n\nCTMachineArrival\nKey Inputs\nInitialNumber\n3\n\n\nCTMachineArrival\nHCCM\nNextAEJObject\nWaitForTaskCTMachine\n\n\n\n\n\n\nNext we will set the options for the Process Activities (and Statistics) so that the routing/flow for the entities is correct. The Check In activity has both the Patient and Receptionist as participants so we set the Participant list to PatientEntity, ReceptionistEntity. The duration is determined by the check in distribution, so we just set the duration to be CheckInDistribution object. After Check In the Patient starts waiting for a scan and the receptionist goes back to waiting for a task, so we set the NextAEJList to WaitForScan, WaitForTaskReceptionist. The Scan activity has both the Patient and CTMachine as participants and the duration is determined by the ScanDistribution object. After Scan the Patient should just leave, but we want to record some statistics first so we send it to TimeInSystem, and the CTMachine goes back to WaitForTaskCTMachine. For Process Activities the NextAEJList is similar to the NextAEJObject from the Arrive Events (which is similar to NextComponent), the difference is that a list of next objects is given, one for each of the participants in the activity. The participants are sent to the corresponding element of the list so it is important that the next activities are in the same order as the participants.\nNote that when you click on the checkboxes in the popup menu for both ParticipantList and NextAEJList the items are added in alphabetical order, not the order you click them in. This is particularly important for the Scan activity as the CTMachineEntity comes before the PatientEntity alphabetically, but for the next activities TimeInSystem is before WaitForTaskCTMachine alphabetically so the two lists will not be in the same order.\n\n\n\nTable 1.5: Process Activity Parameters\n\n\n\n\n\nObject\nTab\nKeyword\nValue\n\n\n\n\nCheckIn\nKey Inputs\nDuration\nCheckInDistribution\n\n\nCheckIn\nHCCM\nParticipantList\nPatientEntity ReceptionistEntity\n\n\nCheckIn\nHCCM\nNextAEJList\nWaitForScan WaitForTaskReceptionist\n\n\n\n\n\n\n\n\nScan\nKey Inputs\nDuration\nScanDistribution\n\n\nScan\nHCCM\nParticipantList\nPatientEntity CTMachineEntity\n\n\nScan\nHCCM\nNextAEJList\nTimeInSystem WaitForTaskCTMachine\n\n\n\n\n\n\nThe last object we need to configure before the simulation will run (it will run but it will not quite work correctly) is the TimeInSystem object. This is a Statistics object which collects a value from each Entity that passes through it and outputs the mean of the sampled values. We then need to finish the routing so that patients leave after going through the TimeInSystem, and tell the Statistics object which value to record as shown in Table 1.6, note that this refers to the Statistics object itself, obj refers to the entity that the Statistics object is currently processing, and TotalTime is an output on the entity that stores the total time that the entity has been in the simulation for.\n\n\n\nTable 1.6: Collecting Statistics\n\n\n\n\n\nObject\nKeyword\nValue\n\n\n\n\nTimeInSystem\nNextComponent\nPatientLeave\n\n\n\nUnitType\nTimeUnit\n\n\n\nSampleValue\nthis.obj.TotalTime\n\n\n\n\n\n\nSave your simulation again. If you run your simulation now you should see one receptionist arrive and wait, three CT machines arrive and wait, and patients arrive, and wait for check in. However nothing else will happen and all of the entities will simply be waiting, this is because we have not specified any logic to be triggered when the entities start waiting.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1/lab_1.html#model-logic-java",
    "href": "chapters/lab_1/lab_1.html#model-logic-java",
    "title": "1  Radiology Clinic",
    "section": "1.3 Model Logic – Java",
    "text": "1.3 Model Logic – Java\nIn your eclipse project you should have a folder called ‘sim_custom’ under the Project Explorer on the left hand side in Eclipse. First right-click on this folder and select New \\(\\rightarrow\\) Package. Enter labs for the name of the package and click Finish.\n\n\n\n\n\n\n\nFigure 1.3: First Step in Creating a New Package\n\n\n\n\n\n\n\n\nFigure 1.4: Second Step in Creating a New Package\n\n\n\nRight click on the newly created labs package and select New \\(\\rightarrow\\) Class. Name the Class RadiologyControlUnit and enter hccm.controlunits.ControlUnit for the Superclass.\n\n\n\n\n\n\n\nFigure 1.5: First Step in Creating a New Class\n\n\n\n\n\n\n\n\nFigure 1.6: Second Step in Creating a New Class\n\n\n\nWhat this has done is created a new Java class, based off the ControlUnit class, which we will use to implement the logic required for the clinic. The final step required to make this new object available in the simulation is to add to the contents of the sim_custom.inc file that we put in sim \\(\\rightarrow\\) hccm \\(\\rightarrow\\) jaamsim \\(\\rightarrow\\) src \\(\\rightarrow\\) main \\(\\rightarrow\\) resources \\(\\rightarrow\\) resources \\(\\rightarrow\\) inputs. There should already be some code there from the previous lab, so you only need to add lines 3, 7, and 10. If you want to copy and paste this make sure the quotes are copied correctly and the return (arrow) on line 10 is removed. Alternatively there is a new sim_custom.inc file on Canvas under Jaamsim Lab 1 that you can use directly.\n\nDefine ObjectType {\n    FIFOQControlUnit\n    RadiologyControlUnit\n}\n\nControllerIconModel ImageFile { '&lt;res&gt;/images/Controller-256.png' }  Transparent { TRUE }\nAssembleIconModel ImageFile { '&lt;res&gt;/images/Assemble-256.png' }  Transparent { TRUE }\n\nFIFOQControlUnit JavaClass { ssq.FIFOQControlUnit }  Palette { 'Single Server Queue' } DefaultDisplayModel { ControllerIconModel } IconFile { '&lt;res&gt;/images/Controller-24.png' } DefaultSize { 0.5 0.5 0.5 m }\nRadiologyControlUnit JavaClass { labs.RadiologyControlUnit }  Palette { 'Custom Logic' } DefaultDisplayModel { AssembleIconModel } IconFile { '&lt;res&gt;/images/Assemble-24.png' } DefaultSize { 0.5 0.5 0.5 m }\n\nOnce you have updated the sim_custom.inc file, clean your project and restart Jaamsim. If everything is working correctly the RadiologyControlUnit object should now be available under the Custom Logic palette as shown in the screenshot below:\n\n\n\n\n\n\nFigure 1.7: Screenshot of Control Unit Object\n\n\n\nOnce you have the new RadiologyControlUnit object available open your simulation and create one.\nWe now need to add the Java code to the new RadiologyControlUnit class to run the control policies. First add the following imports under the package declaration. Note These code snippets for this lab are provided in a separate file for you\npackage labs;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport hccm.activities.ProcessActivity;\nimport hccm.controlunits.ControlUnit;\nimport hccm.entities.ActiveEntity;\nThen, within the definition of the class we need to create four methods that represent the four control policies in the model. Each control policy is a public method of the class that does not return any value (is void) and takes both a list of Active Entities, and the simulation time as inputs. We will use the same names for the methods as the control policies in the conceptual model: OnStartWaitForCheckIn, OnStartWaitForScan, OnStartWaitForTaskReceptionist, and OnStartWaitForTaskCTMachine. In the first of these, OnStartWaitForCheckIn we first need to get a list of the Receptionist Entities that are currently in the ’’WaitForTaskReceptionist” activity, and we also create a comparator object that is used to sort a list of entities by when they started their current activity.\nOnce we have the list of idle receptionists we check whether it is not empty, and if it isn’t proceed to sort it, select the first one, and transition the patient and receptionist to the check in activity.\n\npublic void OnStartWaitForCheckIn(List&lt;ActiveEntity&gt; ents, double simTime) {\n        \n    ArrayList&lt;ActiveEntity&gt; idleReceps = this.getEntitiesInActivity(\"ReceptionistEntity\", \"WaitForTaskReceptionist\", simTime);\n    ActivityStartCompare actSartComp = this.new ActivityStartCompare();        \n    \n    if (idleReceps.size() &gt; 0) {\n      Collections.sort(idleReceps, actSartComp);\n      \n      ActiveEntity patient = ents.get(0);\n      ActiveEntity receptionist = idleReceps.get(0);\n      \n      transitionTo(\"CheckIn\", patient, receptionist);\n    }\n  }\n\nSimilar methods are defined for the other control policies, with small changes based on the types of entities that are being checked, and the activity that is started. There are gaps that need to be filled in on lines 3, 24, and 42. In the first gap you need to create an array that contains all of the CT Machines that are currently idle. In the second, you need to select which of the patients that are currently waiting should do check in with the receptionist. In the third, you need to start the next activity with the patient and CT Machine. All of these have similar lines in the first method that you can use as a guide.\n\npublic void OnStartWaitForScan(List&lt;ActiveEntity&gt; ents, double simTime) {\n  \n    // A //\n    ActivityStartCompare actSartComp = this.new ActivityStartCompare();        \n    \n    if (idleCTs.size() &gt; 0) {\n      Collections.sort(idleCTs, actSartComp);\n      \n      ActiveEntity patient = ents.get(0);\n      ActiveEntity ct = idleCTs.get(0);\n\n      transitionTo(\"Scan\", patient, ct);\n    }\n  }\n    \npublic void OnStartWaitForTaskReceptionist(List&lt;ActiveEntity&gt; ents, double simTime) {\n      \n  ArrayList&lt;ActiveEntity&gt; waitPats = this.getEntitiesInActivity(\"PatientEntity\", \"WaitForCheckIn\", simTime);\n  ActivityStartCompare actSartComp = this.new ActivityStartCompare();        \n  \n  if (waitPats.size() &gt; 0) {\n    Collections.sort(waitPats, actSartComp);\n    \n    // B //\n    ActiveEntity receptionist = ents.get(0);\n\n    transitionTo(\"CheckIn\", patient, receptionist);\n  }\n}\n\npublic void OnStartWaitForTaskCTMachine(List&lt;ActiveEntity&gt; ents, double simTime) {\n  \n  ArrayList&lt;ActiveEntity&gt; waitPats = this.getEntitiesInActivity(\"PatientEntity\", \"WaitForScan\", simTime);\n  ActivityStartCompare actSartComp = this.new ActivityStartCompare();        \n    \n  if (waitPats.size() &gt; 0) {\n    Collections.sort(waitPats, actSartComp);\n    \n    ActiveEntity patient = waitPats.get(0);\n    ActiveEntity ct = ents.get(0);\n\n    // C //\n  }\n}\n\nThe final step needed to get this logic into the simulation is to define Triggers that initiate these methods and where/when they should be called. To do this create four Trigger objects, called StartWaitCheckIn, StartWaitScan, StartWaitTaskReceptionist, and StartWaitTaskCTMachine from the HCCM palette and set the ControlUnit and ControlPolicy for each one. The value of the ControlPolicy keyword needs to exactly match the name of the method you have defined in the java code.\n\n\n\nTable 1.7: Trigger Parameters\n\n\n\n\n\nObject\nTab\nKeyword\nValue\n\n\n\n\nStartWaitCheckIn\nHCCM\nControlUnit\nRadiologyControlUnit1\n\n\nStartWaitCheckIn\nHCCM\nControlPolicy\nOnStartWaitForCheckIn\n\n\n\n\n\n\n\n\nStartWaitScan\nHCCM\nControlUnit\nRadiologyControlUnit1\n\n\nStartWaitScan\nHCCM\nControlPolicy\nOnStartWaitForScan\n\n\n\n\n\n\n\n\nStartWaitTaskReceptionist\nHCCM\nControlUnit\nRadiologyControlUnit1\n\n\nStartWaitTaskReceptionist\nHCCM\nControlPolicy\nOnStartWaitForTaskReceptionist\n\n\n\n\n\n\n\n\nStartWaitTaskCTMachine\nHCCM\nControlUnit\nRadiologyControlUnit1\n\n\nStartWaitTaskCTMachine\nHCCM\nControlPolicy\nOnStartWaitForTaskCTMachine\n\n\n\n\n\n\nThen update the parameters in the Wait Activities that these control policies should be triggered in:\n\n\n\nTable 1.8: Wait Activity Parameters\n\n\n\n\n\nObject\nTab\nKeyword\nValue\n\n\n\n\nWaitForCheckIn\nHCCM\nStartTriggerList\nStartWaitCheckIn\n\n\nWaitForCheckIn\nHCCM\nStartTriggerChoice\n1\n\n\n\n\n\n\n\n\nWaitForScan\nHCCM\nStartTriggerList\nStartWaitScan\n\n\nWaitForScan\nHCCM\nStartTriggerChoice\n1\n\n\n\n\n\n\n\n\nWaitForTaskReceptionist\nHCCM\nStartTriggerList\nStartWaitTaskReceptionist\n\n\nWaitForTaskReceptionist\nHCCM\nStartTriggerChoice\n1\n\n\n\n\n\n\n\n\nWaitForTaskCTMachine\nHCCM\nStartTriggerList\nStartWaitTaskCTMachine\n\n\nWaitForTaskCTMachine\nHCCM\nStartTriggerChoice\n1\n\n\n\n\n\n\nNow if you save and run your simulation you should be able to see patients arriving, checking in, being scanned, and leaving. If you get an error saying that a method cannot be found on the control unit, first make sure that all of the ControlPolicy inputs exactly match the names of the methods in the control unit java file. Then try closing Jaamsim, cleaning your project, and restarting Jaamsim.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1/lab_1.html#model-output",
    "href": "chapters/lab_1/lab_1.html#model-output",
    "title": "1  Radiology Clinic",
    "section": "1.4 Model Output",
    "text": "1.4 Model Output\nTo perform different experiments and multiple replications we make use of Jaamsim’s MultipleRuns feature which can be found in the Simulation object at the top of the Object Selector window. Here we can use the NumberOfReplications to control how many replications are performed. We want to do 50 replications so we set NumberOfReplications to 50. We want each replication to run for one week, so we set RunDuration to 7d. To record outputs we can make use of the Simulation object’s RunOutputList, which saves the final value of outputs at the end of each run. The scenario number, and the replication number are saved by default (by default PrintRunLabels and PrintReplications are TRUE), but we will calculate confidence intervals ourselves so we set PrintConfidenceIntervals to FALSE. Because ActiveEntities are removed from the simulation when they enter a LeaveEvent, we cannot get the total time that each patient spends in the clinic at the end of the run. This is why we created a Statistics object called TimeInSystem that records how long they have been in the system before they are destroyed. We can use the SampleAverage output of the TimeInSystem object in the Simulation’s RunOutputList to output the mean time in system for each replication. Note The SampleAverage is divided by 1[h] to give a raw number in hours for later processing in R. Otherwise JaamSim writes an h to the data file.\n\n\n\nTable 1.9: Simulation Parameters\n\n\n\n\n\nObject\nTab\nKeyword\nValue\n\n\n\n\nSimulation\nKey Inputs\nRunDuration\n7 d\n\n\nSimulation\nKey Inputs\nRunOutputList\n{‘[TimeInSystem].SampleAverage / 1[h]’}\n\n\nSimulation\nMultiple Runs\nNumberOfReplications\n50\n\n\nSimulation\nMultiple Runs\nPrintConfidenceIntervals\nFALSE\n\n\n\n\n\n\nNow if you save and run your simulation a file should be created called ‘yourSimulationName.dat’. To speed up running the simulation you can turn off the option ‘Real time’, in the top left corner next to the play button.\nWith the model complete and the results recorded we can use R to analyse them. First download the R analysis file provided, then change the working directory and name of the .dat and .log files to match yours, then run the R file. The following table should be printed:\n\n\n\nTable 1.10: R Output\n\n\n\n\n\nlower95CI\nmean\nupper95CI\n\n\n0.442\n0.449\n0.457",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1/lab_1.html#task",
    "href": "chapters/lab_1/lab_1.html#task",
    "title": "1  Radiology Clinic",
    "section": "1.5 Task",
    "text": "1.5 Task\nConstruct a 95% confidence interval for the average utilisation of the three CT machines in each experiment. You should get the following output:\n\n\n\nTable 1.11: Task Output\n\n\n\n\n\nlower95CI\nmean\nupper95CI\n\n\n0.724\n0.731\n0.737\n\n\n\n\n\n\nHint: there are many ways to do this. Have a look at the outputs provided on the wait activity WaitForTaskCTMachine, can you calculate the total time that the three CTMachines have spent waiting using these outputs?",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_2/lab_2.html",
    "href": "chapters/lab_2/lab_2.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html",
    "href": "chapters/lab_1_cm/lab_1_cm.html",
    "title": "3  Radiology Clinic",
    "section": "",
    "text": "3.1 Data",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#data",
    "href": "chapters/lab_1_cm/lab_1_cm.html#data",
    "title": "3  Radiology Clinic",
    "section": "",
    "text": "Table 3.1: List of Global Variables\n\n\n\n\n\nName\nDescription\nInitial Value\n\n\n\n\nNextPatIdNum\nThe Id number that will be assigned to the next patient\n1\n\n\nNextReceptionistIdNum\nThe Id number that will be assigned to the next receptionist\n1\n\n\nNextCTMachineIdNum\nThe Id number that will be assigned to the next CT Machine\n1\n\n\n\\(P\\)\nThe set of all patients\n\\(\\emptyset\\)\n\n\n\\(R\\)\nThe set of all receptionists\n\\(\\emptyset\\)\n\n\n\\(C\\)\nThe set of all CT Machines\n\\(\\emptyset\\)\n\n\n\n\n\n\n\n\n\nTable 3.2: List of Data Modules\n\n\n\n\n\nName\nSource\nIdentification\nInput\nOutput\n\n\n\n\nPatientInterarrivalTime\nPoisson Process\nParameter\nMean interarrival time\nSample from Distribution\n\n\nNumReceptionists\nConstant\nParameter\nN/A\nValue\n\n\nNumCTMachines\nConstant\nParameter\nN/A\nValue\n\n\nCheckInTime\nUniform Distribution\nParameter\nMin and max time\nSample from Distribution\n\n\nScanTime\nLog-normal Distribution\nParameter\nMean and std. dev.\nSample from Distribution",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#components",
    "href": "chapters/lab_1_cm/lab_1_cm.html#components",
    "title": "3  Radiology Clinic",
    "section": "3.2 Components",
    "text": "3.2 Components\n\n\n\nTable 3.3: List of Entities\n\n\n\n\n\nEntity\nAttributes\n\n\n\n\nPatient\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\nReceptionist\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\nCT Machine\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\n\n\n\nTable 3.4: List of Transitions\n\n\n\n\n\nNo.\nParticipant\nFrom Event\nTo Event\n\n\n\n\n1\nPatient\nArrive(P)\nWait for check in.Start\n\n\n2\nPatient\nWait for check in.End\nCheck in.Start\n\n\n3\nPatient\nCheck in.End\nWait for scan.Start\n\n\n4\nPatient\nWait for scan.End\nScan.Start\n\n\n5\nPatient\nScan.End\nLeave(P)\n\n\n6\nReceptionist\nArrive(R)\nWait for task(R).Start\n\n\n7\nReceptionist\nWait for task(R).End\nCheck in.Start\n\n\n8\nReceptionist\nCheck in.End\nWait for task(R).Start\n\n\n9\nReceptionist\nWait for task(R).End\nLeave(R)\n\n\n10\nCT Machine\nArrive(CT)\nWait for task(CT).Start\n\n\n11\nCT Machine\nWait for task(CT).End\nScan.Start\n\n\n12\nCT Machine\nScan.End\nWait for task(CT).Start\n\n\n13\nCT Machine\nWait for task(CT).End\nLeave(CT)\n\n\n\n\n\n\n\n\n\nTable 3.5: Activities\n\n\n\n\n\nActivity\nParticipants\nEvent\nType\nState Change\n\n\n\n\nWait for Check In\nPatient (p)\nStart\nScheduled\nTRIGGER OnStartWaitForCheckIn WITH p\n\n\n\n\nEnd\nControlled\n\n\n\nCheck In\nPatient (p), Receptionist (r)\nStart\nControlled\nSCHEDULE Check In.End at TIME + CheckInTime()\n\n\n\n\nEnd\nScheduled\nSTART Wait for Scan WITH p\nSTART Wait for Task (R) WITH r\n\n\nWait for Scan\nPatient (p)\nStart\nScheduled\n\n\n\n\n\nEnd\nControlled\nTRIGGER OnStartWaitForScan WITH p\n\n\nScan\nPatient (p), CTMachine (c)\nStart\nControlled\nSCHEDULE Scan.End at TIME + ScanTime()\n\n\n\n\nEnd\nScheduled\nSTART Leave (P) WITH p\nSTART Wait for Task (CT) WITH c\n\n\nWait for Task (R)\nReceptionist (r)\nStart\nScheduled\nTRIGGER OnStartWaitForTaskR WITH r\n\n\n\n\nEnd\nControlled\n\n\n\nWait for Task (CT)\nCTMachine (c)\nStart\nScheduled\nTRIGGER OnStartWaitForTaskCT WITH c\n\n\n\n\nEnd\nControlled\n\n\n\n\n\n\n\n\n\n\nTable 3.6: Events\n\n\n\n\n\nActivity\nParticipants\nType\nState Change\n\n\n\n\nSimulation Start\n-\nScheduled\nSCHEDULE Arrival (R) at TIME\nSCHEDULE Arrival (CT) at TIME\nSCHEDULE Arrival (P) at TIME + PatientInterArrival()\n\n\nArrival (P)\nPatient (p)\nScheduled\np.ID = NextPatIDNum\np.Priority = PatientPriority()\nNextPatIDNum = NextPatIDNum + 1\nSCHEDULE Arrival (P) at TIME + PatientInterArrival()\nSTART Wait for Check In WITH p\n\n\nLeave (P)\nPatient (p)\nScheduled\nCalculate statistics for p\n\n\nArrival (R)\nReceptionist (r)\nScheduled\nr.ID = NextReceptionistIDNum\nNextReceptionistIDNum = NextReceptionistIDNum + 1\nIF NextReceptionistIDNum &lt;= NumReceptionists THEN\n    SCHEDULE Arrival (R) at TIME\nEND IF\nSTART Wait for Task (R) WITH r\n\n\nLeave (R)\nReceptionist (r)\nScheduled\nCalculate statistics for r\n\n\nArrival (CT)\nCTMachine (c)\nScheduled\nc.ID = NextCTMachineIDNum\nNextCTMachineIDNum = NextCTMachineIDNum + 1\nIF NextCTMachineIDNum &lt;= NumCTMachines THEN\n    SCHEDULE Arrival (CT) at TIME\nEND IF\nSTART Wait for Task (CT) WITH c\n\n\nLeave (P)\nCTMachine (c)\nScheduled\nCalculate statistics for c",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#activity-diagrams",
    "href": "chapters/lab_1_cm/lab_1_cm.html#activity-diagrams",
    "title": "3  Radiology Clinic",
    "section": "3.3 Activity Diagrams",
    "text": "3.3 Activity Diagrams\n\n\n\n\n\n\nFigure 3.1: Patient Activity Diagram\n\n\n\n\n\n\n\n\n\nFigure 3.2: Receptionist Activity Diagram\n\n\n\n\n\n\n\n\n\nFigure 3.3: CT Activity Diagram",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#control-policies",
    "href": "chapters/lab_1_cm/lab_1_cm.html#control-policies",
    "title": "3  Radiology Clinic",
    "section": "3.4 Control Policies",
    "text": "3.4 Control Policies\n\n\n\nTable 3.7: OnStartWaitForCheckIn\n\n\n\n\n\n\nTriggered by: Patient p\n\n\n\n\n\nreceps = {r FOR r IN R IF r.State = \"Wait for task (R)\"}\nIF receps IS NOT empty THEN \n    r_hat = argmin{r.CurrentStart FOR r IN receps}\n    START Check In WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.8: OnStartWaitForScan\n\n\n\n\n\n\nTriggered by: Patient p\n\n\n\n\n\ncts = {c FOR c IN C IF c.State = \"Wait for task (C)\"}\nIF cts IS NOT empty THEN \n    c_hat = argmin{c.CurrentStart FOR c IN cts}\n    START Scan WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.9: OnStartWaitForTaskR\n\n\n\n\n\n\nTriggered by: Receptionist r\n\n\n\n\n\npatients = {p FOR p IN P IF p.State = \"Wait for Check In\"}\nIF patients IS NOT empty THEN \n    p_hat = argmin{p.CurrentStart FOR p IN patients}\n    START Check In WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.10: OnStartWaitForTaskCT\n\n\n\n\n\n\nTriggered by: CTMachine c\n\n\n\n\n\npatients = {p FOR p IN P IF p.State = \"Wait for Scan\"}\nIF patients IS NOT empty THEN \n    p_hat = argmin{p.CurrentStart FOR p IN patients}\n    START Scan WITH p, r_hat\nEND IF",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  }
]