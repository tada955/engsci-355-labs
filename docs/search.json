[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ENGSCI 355 Labs",
    "section": "",
    "text": "Preface\nThese are an online version of the Labs for ENGSCI 355. The topics covered are: a hands-on simulation of a manufacturing process; conceptual modelling using HCCM; implementing HCCM models in Jaamsim; and missing data imputaton.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/vscode_java_setup/vscode_java_setup.html",
    "href": "chapters/vscode_java_setup/vscode_java_setup.html",
    "title": "1  Setting Up VSCode and Java",
    "section": "",
    "text": "In this lab you will walk through the set up of running a Java program in VSCode. You will need to be able to do this to implement HCCMs in Jaamsim.\nIf you do not already have VSCode installed on your machine, download and install the version appropriate for your operating system from here.\n\nIf you are using your own laptop, it is best to install a recent version of the Java JDK (unless you are confident you already have a recent version). We recommend Amazon Corretto 21. You can download it from here, and then install it.\nThe videos provided on this page are also available here.\nOpen VSCode, then on the left-hand side click on the Extensions tab. Search for the ‘Extension Pack for Java’ and install it.\n\nCreate a new folder called ENGSCI355, if you are using a lab computer create this folder on your H drive. If you aren’t, then create it within Documents or wherever you usually keep University related work. Inside the ENGSCI355 folder create another folder called Java_Example. Then in VSCode open this folder by going File -&gt; Open Folder, then navigating to the Java_Example folder.\n\n\nOnce you have opened the folder in VSCode, create a new file in it called Hello.java. Once you have that file (or any .java file) open VSCode should detect that you are editing a java file and, if there isn’t one already, create a Java Project in the same folder. You should see that the ‘Java Projects’ section has been enabled in the bottom left of the screen.\n\nWe now want to make sure that this Java Project is using the correct Java JDK. Hover your mouse over the ‘Java Projects’ title and then click on the three dots that appear on the right hand side (with the tooltip ‘More Actions’), and select ‘Configure Java Runtime’. Use the drop-down menu that appears to select the Amazon Corretto 21 JDK. If it is not on the list, select ‘Find a local JDK’ and browse to the location that you installed the Amazon Corretto JDK.\n\nNow go back to the Hello.java file and add the following code:\npublic class Hello {\n  public static void main(String[] args) {\n    System.out.println(\"Hello!\");\n  }\n}\nTo run the program either click on the ‘Run’ button just above the line that declares the main function, or click on the run button in the top right corner of the screen. You should see a line with ‘Hello!’ printed by itself.\n\nYou have now create and run a Java program! If you run into any issues, there are more detailed instructions available here.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting Up VSCode and Java</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "",
    "text": "2.1 Prerequisites\nThese instructions were prepared using:\nThey should work with more recent versions of the software too. All of this software is standard on Engineering lab machines. Amazon Corretto JRE 21 is available on the University of Auckland’s Software Centre.\nThe videos provided on this page are also available here.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#prerequisites",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#prerequisites",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "",
    "text": "Git – 2.47.0.2;\nGitHub Desktop – 3.4.8 (x64);\nJava – Amazon Corretto JRE 21;\nVSCode – 1.95.1.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#create-the-project-folder-structure",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#create-the-project-folder-structure",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.2 Create the Project Folder Structure",
    "text": "2.2 Create the Project Folder Structure\nCreate a new folder on your H drive called ENGSCI355. Then create three folders within this one, called sim, labs, and workspace. The sim folder will contain the java code for the simulation software Jaamsim, including custom code that you write, and is the focus of these instructions. The labs folder will contain subfolders for each lab with the simulation files for each. Create a folder for HCCM logic functions within the sim folder. We will use sim_custom in these instructions.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#clone-hccm-into-the-project-folder",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#clone-hccm-into-the-project-folder",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.3 Clone HCCM into the project folder",
    "text": "2.3 Clone HCCM into the project folder\nOpen GitHub Desktop and go to File \\(\\rightarrow\\) Clone repository, then select the URL tab and enter\n\nhttps://github.com/mosu001/hccm\n\nas the URL. Choose the Local path to be the sim folder that you just created.\ninto an hccm folder within the sim folder. This will create an hccm folder within the sim folder that contains the HCCM and Jaamsim code.\nNote, if you use git from the command line, e.g., Git Bash, you need to add the recurse submodules option\ngit clone --recurse-submodules https://github.com/mosu001/hccm",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#create-files-to-load-hccm-and-customised-components",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#create-files-to-load-hccm-and-customised-components",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.4 Create files to load HCCM and customised components",
    "text": "2.4 Create files to load HCCM and customised components\nFrom hccm_custom copy both autoload.cfg and hccm.inc into the sim_custom folder. Then open autoload.cfg with VSCode and edit it so that the content matches that in Figure 2.1.\n\n\n\nInclude units.inc\nInclude sim.inc\nInclude units-imperial.inc\nInclude units-knots.inc\nInclude displayModels.inc\nInclude graphics.inc\nInclude probabilityDistributions.inc\nInclude basicObjects.inc\nInclude resourceObjects.inc\nInclude examples.inc\nInclude processFlow.inc\nInclude calculationObjects.inc\nInclude fluidObjects.inc\nInclude submodels.inc\nInclude hccm.inc\nInclude sim_custom.inc\n\n\nFigure 2.1: Customised autoload.cfg File\n\n\n\nThen rename hccm.inc to sim_custom.inc, open it in VSCode, and delete all the contents so it is blank. Don’t forget to save both autoload.cfg and sim_custom.inc.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#create-a-vscode-java-project",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#create-a-vscode-java-project",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.5 Create a VSCode Java Project",
    "text": "2.5 Create a VSCode Java Project\nIn VSCode use File \\(\\rightarrow\\) Open Folder to open the sim folder. In the File Explorer open some folder so that you can see a .java file and open it, for example: hccm\\custom\\hccm\\Constants.java. VSCode should then recognise that you have opened a Java file and the Java Projects pane should appear.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#configure-source-folders",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#configure-source-folders",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.6 Configure Source Folders",
    "text": "2.6 Configure Source Folders\nNow we need to tell VSCode where the source code of the project is. To do this we click on the three dots at the right of the ‘Java Projects’ title and select ‘Configure Classpath’. A new menu should come up that allows you to add and remove sources. If anything other than hccm\\custom is already there remove it by clicking on the x on the far right hand side, then ‘Apply Settings’. Add new sources by clicking on ‘Add Source Root’. First add sim\\hccm\\jaamsim\\src\\main\\java, then click ‘Apply Settings’. Then add both sim\\hccm\\jaamsim\\src\\main\\resources and sim\\sim_custom, remembering to apply the settings after each one.\nYou can check to make sure that you have the correct sources configured by opening the settings.json file in the .vscode folder. Under “java.project.sourcePaths” there should be the following four entries:\n\nhccm\\\\custom\nhccm\\\\jaamsim\\\\src\\\\main\\\\java\nhccm\\\\jaamsim\\\\src\\\\main\\\\resources\nsim_custom",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#configure-jdk",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#configure-jdk",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.7 Configure JDK",
    "text": "2.7 Configure JDK\nWe need to make sure that VSCode is using the version of Java that we want it to. To do this we click on the three dots at the right of the ‘Java Projects’ title and select ‘Configure Java Runtime’. A drop-down menu for JDK should come up. Make sure that JavaSE-21 is selected and then click ‘Apply Settings’.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#configure-libraries",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#configure-libraries",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.8 Configure Libraries",
    "text": "2.8 Configure Libraries\nJaamSim also needs the gluegen and jogl libraries to run. These are packaged with JaamSim as .jar files (a compiled Java program). They can be added by opening the project settings by clicking on the three dots at the right of the ‘Java Projects’ title and selecting either ‘Configure Java Runtime’ or ‘Configure Classpath’. Then select the ‘Libraries’ tab on the right. Click on ‘Add Library’, then navigate to hccm\\jaamsim\\jar, select all of the files, and click ‘Select Jar File’. Then click ‘Apply Settings’.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#integrate-with-jaamsim",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#integrate-with-jaamsim",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.9 Integrate with JaamSim",
    "text": "2.9 Integrate with JaamSim\nTo integrate HCCM and any custom logic with JaamSim you need to copy your autoload.cfg and sim_custom.inc files (from sim_custom) to sim\\hccm\\jaamsim\\src\\main\\resources\\resources\\inputs and replace the autoload.cfg file that is currently there. You also need to copy the file hccm.inc in hccm\\custom to the same location. To check that they have been copied correctly you can look in the ‘Java Projects’ section on the left-hand side. Under hccm\\jaamsim\\src\\main\\resources\\resources\\inputs you should see both hccm.inc and sim_custom.inc. If you don’t, try using the menu accessed by clicking the three dots and selecting ‘Refresh’.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#run-custom-jaamsim",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#run-custom-jaamsim",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.10 Run Custom JaamSim",
    "text": "2.10 Run Custom JaamSim\nYou should now be able to run JaamSim with the HCCM objects enabled. Start by clicking on the ‘Run and Debug’ menu on the left-hand side, then click on ‘create a launch.json file’, and select ‘Java’ from the list of debuggers that comes up in the middle of the screen. By doing this VSCode analyses the source code to determine which java files you might like to run and creates run configurations for each of them. In the file that is created you should see an entry with the name ‘GUIFrame’, this is the class that we need to run to start JaamSim. To make the view work correctly when JaamSim is running you need to add another parameter called “vmArgs” with the following entries enclosed in double quotes and separated by spaces on a single line:\n\n--add-exports java.base/java.lang=ALL-UNNAMED\n--add-exports java.desktop/sun.awt=ALL-UNNAMED\n--add-exports java.desktop/sun.java2d=ALL-UNNAMED\n\nThe final entry in the .launch file should look like this:\n\n\"type\": \"java\",\n\"name\": \"GUIFrame\",\n\"request\": \"launch\",\n\"mainClass\": \"com.jaamsim.ui.GUIFrame\",\n\"projectName\": \"sim_d11998cc\",\n\"vmArgs\": \"--add-exports java.base/java.lang=ALL-UNNAMED --add-exports java.desktop/sun.awt=ALL-UNNAMED --add-exports java.desktop/sun.java2d=ALL-UNNAMED\"\n\nThen, in the top left-hand corner next to the green play button click on the drop-down menu and select ‘GUIFrame’. Then click the green play button to run JaamSim. The launch screen should appear but you might also have to click on the JaamSim icon in the Taskbar at the bottom of the screen to open JaamSim. You should see the ‘HCCM’ palette at the bottom of the ‘Model Builder’ window, and be able to drag and drop objects into the View.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/jaamsim_setup/jaamsim_setup.html#running-an-hccm-model",
    "href": "chapters/jaamsim_setup/jaamsim_setup.html#running-an-hccm-model",
    "title": "2  Setting Up JaamSim and HCCM",
    "section": "2.11 Running an HCCM Model",
    "text": "2.11 Running an HCCM Model\nNow that we have JaamSim running with the HCCM objects we can try running an existing model. Download the single server queue model’s folder from Canvas (ssq.zip), move it into the labs folder and extract ssq.zip into that folder. You might want to remove the ssq at the end of the extraction destination to prevent nested ssq folders being created.\nNow we need to create package in our Java Project to hold the custom logic associated with this model. In VSCode right-click on the sim_custom folder and select New Java Package. Enter ssq for the name of the package and click Finish. This will have created a new folder in the sim_custom folder called ssq.\nNow go back to the ssq folder you extracted the zip file to and copy the FIFOQControlUnit.java file to the newly created package folder under sim\\sim_custom\\ssq. This java file defines a new Jaamsim object, in this case the control unit for the SSQ model.\n\nFinally we need to make this new object available in Jaamsim. To do this we need to edit the sim_custom.inc file that we put in sim\\hccm\\jaamsim\\src\\main\\resources\\resources\\inputs. Open the sim_custom.inc file and also open the ssq.inc file in the ssq folder. Copy the contents of ssq.inc into sim_custom.inc.\nRun JaamSim with HCCM from the Run and Debug menu again (make sure that GUIFrame is selected in the drop-down). You should now see a Single Server Queue palette in the Model Builder window. It has the FIFO trigger for the Single Server Queue model (you will learn more about triggers in later labs).\nNext in Jaamsim in the top left corner select file, then open, and open ssq.cfg from the ssq folder. You can run the model by clicking on the blue play button in the top left and see how the customers and servers join together for service in the queue.",
    "crumbs": [
      "Jaamsim Labs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Setting Up JaamSim and HCCM</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html",
    "href": "chapters/lab_1_cm/lab_1_cm.html",
    "title": "3  Radiology Clinic",
    "section": "",
    "text": "3.1 Data",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#data",
    "href": "chapters/lab_1_cm/lab_1_cm.html#data",
    "title": "3  Radiology Clinic",
    "section": "",
    "text": "Table 3.1: List of Global Variables\n\n\n\n\n\nName\nDescription\nInitial Value\n\n\n\n\nNextPatIdNum\nThe Id number that will be assigned to the next patient\n1\n\n\nNextReceptionistIdNum\nThe Id number that will be assigned to the next receptionist\n1\n\n\nNextCTMachineIdNum\nThe Id number that will be assigned to the next CT Machine\n1\n\n\n\\(P\\)\nThe set of all patients\n\\(\\emptyset\\)\n\n\n\\(R\\)\nThe set of all receptionists\n\\(\\emptyset\\)\n\n\n\\(C\\)\nThe set of all CT Machines\n\\(\\emptyset\\)\n\n\n\n\n\n\n\n\n\nTable 3.2: List of Data Modules\n\n\n\n\n\nName\nSource\nIdentification\nInput\nOutput\n\n\n\n\nPatientInterarrivalTime\nPoisson Process\nParameter\nMean interarrival time\nSample from Distribution\n\n\nNumReceptionists\nConstant\nParameter\nN/A\nValue\n\n\nNumCTMachines\nConstant\nParameter\nN/A\nValue\n\n\nCheckInTime\nUniform Distribution\nParameter\nMin and max time\nSample from Distribution\n\n\nScanTime\nLog-normal Distribution\nParameter\nMean and std. dev.\nSample from Distribution",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#components",
    "href": "chapters/lab_1_cm/lab_1_cm.html#components",
    "title": "3  Radiology Clinic",
    "section": "3.2 Components",
    "text": "3.2 Components\n\n\n\nTable 3.3: List of Entities\n\n\n\n\n\nEntity\nAttributes\n\n\n\n\nPatient\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\nReceptionist\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\nCT Machine\nID\n\n\n\nState\n\n\n\nStateTimes\n\n\n\n\n\n\n\n\n\nTable 3.4: List of Transitions\n\n\n\n\n\nNo.\nParticipant\nFrom Event\nTo Event\n\n\n\n\n1\nPatient\nArrive(P)\nWait for check in.Start\n\n\n2\nPatient\nWait for check in.End\nCheck in.Start\n\n\n3\nPatient\nCheck in.End\nWait for scan.Start\n\n\n4\nPatient\nWait for scan.End\nScan.Start\n\n\n5\nPatient\nScan.End\nLeave(P)\n\n\n6\nReceptionist\nArrive(R)\nWait for task(R).Start\n\n\n7\nReceptionist\nWait for task(R).End\nCheck in.Start\n\n\n8\nReceptionist\nCheck in.End\nWait for task(R).Start\n\n\n9\nReceptionist\nWait for task(R).End\nLeave(R)\n\n\n10\nCT Machine\nArrive(CT)\nWait for task(CT).Start\n\n\n11\nCT Machine\nWait for task(CT).End\nScan.Start\n\n\n12\nCT Machine\nScan.End\nWait for task(CT).Start\n\n\n13\nCT Machine\nWait for task(CT).End\nLeave(CT)\n\n\n\n\n\n\n\n\n\nTable 3.5: Activities\n\n\n\n\n\nActivity\nParticipants\nEvent\nType\nState Change\n\n\n\n\nWait for Check In\nPatient (p)\nStart\nScheduled\nTRIGGER OnStartWaitForCheckIn WITH p\n\n\n\n\nEnd\nControlled\n\n\n\nCheck In\nPatient (p), Receptionist (r)\nStart\nControlled\nSCHEDULE Check In.End at TIME + CheckInTime()\n\n\n\n\nEnd\nScheduled\nSTART Wait for Scan WITH p\nSTART Wait for Task (R) WITH r\n\n\nWait for Scan\nPatient (p)\nStart\nScheduled\n\n\n\n\n\nEnd\nControlled\nTRIGGER OnStartWaitForScan WITH p\n\n\nScan\nPatient (p), CTMachine (c)\nStart\nControlled\nSCHEDULE Scan.End at TIME + ScanTime()\n\n\n\n\nEnd\nScheduled\nSTART Leave (P) WITH p\nSTART Wait for Task (CT) WITH c\n\n\nWait for Task (R)\nReceptionist (r)\nStart\nScheduled\nTRIGGER OnStartWaitForTaskR WITH r\n\n\n\n\nEnd\nControlled\n\n\n\nWait for Task (CT)\nCTMachine (c)\nStart\nScheduled\nTRIGGER OnStartWaitForTaskCT WITH c\n\n\n\n\nEnd\nControlled\n\n\n\n\n\n\n\n\n\n\nTable 3.6: Events\n\n\n\n\n\nActivity\nParticipants\nType\nState Change\n\n\n\n\nSimulation Start\n-\nScheduled\nSCHEDULE Arrival (R) at TIME\nSCHEDULE Arrival (CT) at TIME\nSCHEDULE Arrival (P) at TIME + PatientInterArrival()\n\n\nArrival (P)\nPatient (p)\nScheduled\np.ID = NextPatIDNum\np.Priority = PatientPriority()\nNextPatIDNum = NextPatIDNum + 1\nSCHEDULE Arrival (P) at TIME + PatientInterArrival()\nSTART Wait for Check In WITH p\n\n\nLeave (P)\nPatient (p)\nScheduled\nCalculate statistics for p\n\n\nArrival (R)\nReceptionist (r)\nScheduled\nr.ID = NextReceptionistIDNum\nNextReceptionistIDNum = NextReceptionistIDNum + 1\nIF NextReceptionistIDNum &lt;= NumReceptionists THEN\n    SCHEDULE Arrival (R) at TIME\nEND IF\nSTART Wait for Task (R) WITH r\n\n\nLeave (R)\nReceptionist (r)\nScheduled\nCalculate statistics for r\n\n\nArrival (CT)\nCTMachine (c)\nScheduled\nc.ID = NextCTMachineIDNum\nNextCTMachineIDNum = NextCTMachineIDNum + 1\nIF NextCTMachineIDNum &lt;= NumCTMachines THEN\n    SCHEDULE Arrival (CT) at TIME\nEND IF\nSTART Wait for Task (CT) WITH c\n\n\nLeave (P)\nCTMachine (c)\nScheduled\nCalculate statistics for c",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#activity-diagrams",
    "href": "chapters/lab_1_cm/lab_1_cm.html#activity-diagrams",
    "title": "3  Radiology Clinic",
    "section": "3.3 Activity Diagrams",
    "text": "3.3 Activity Diagrams\n\n\n\n\n\n\nFigure 3.1: Patient Activity Diagram\n\n\n\n\n\n\n\n\n\nFigure 3.2: Receptionist Activity Diagram\n\n\n\n\n\n\n\n\n\nFigure 3.3: CT Activity Diagram",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  },
  {
    "objectID": "chapters/lab_1_cm/lab_1_cm.html#control-policies",
    "href": "chapters/lab_1_cm/lab_1_cm.html#control-policies",
    "title": "3  Radiology Clinic",
    "section": "3.4 Control Policies",
    "text": "3.4 Control Policies\n\n\n\nTable 3.7: OnStartWaitForCheckIn\n\n\n\n\n\n\nTriggered by: Patient p\n\n\n\n\n\nreceps = {r FOR r IN R IF r.State = \"Wait for task (R)\"}\nIF receps IS NOT empty THEN \n    r_hat = argmin{r.CurrentStart FOR r IN receps}\n    START Check In WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.8: OnStartWaitForScan\n\n\n\n\n\n\nTriggered by: Patient p\n\n\n\n\n\ncts = {c FOR c IN C IF c.State = \"Wait for task (C)\"}\nIF cts IS NOT empty THEN \n    c_hat = argmin{c.CurrentStart FOR c IN cts}\n    START Scan WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.9: OnStartWaitForTaskR\n\n\n\n\n\n\nTriggered by: Receptionist r\n\n\n\n\n\npatients = {p FOR p IN P IF p.State = \"Wait for Check In\"}\nIF patients IS NOT empty THEN \n    p_hat = argmin{p.CurrentStart FOR p IN patients}\n    START Check In WITH p, r_hat\nEND IF\n\n\n\n\n\n\n\n\n\nTable 3.10: OnStartWaitForTaskCT\n\n\n\n\n\n\nTriggered by: CTMachine c\n\n\n\n\n\npatients = {p FOR p IN P IF p.State = \"Wait for Scan\"}\nIF patients IS NOT empty THEN \n    p_hat = argmin{p.CurrentStart FOR p IN patients}\n    START Scan WITH p, r_hat\nEND IF",
    "crumbs": [
      "Conceptual Models",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Radiology Clinic</span>"
    ]
  }
]